#BlueJ class context
comment0.target=SilkRoadContest
comment0.text=\r\n\ Resuelve\ y\ simula\ el\ problema\ de\ la\ marat\u00F3n\ "The\ Silk\ Road\ ...\ with\ Robots\!".\r\n\ Esta\ clase\ orquesta\ la\ simulaci\u00F3n\ d\u00EDa\ a\ d\u00EDa,\ utilizando\ una\ estrategia\ de\ backtracking\r\n\ para\ encontrar\ la\ asignaci\u00F3n\ \u00F3ptima\ de\ robots\ a\ tiendas\ que\ maximice\ la\ ganancia\ total.\r\n
comment1.params=days\ slow
comment1.target=void\ simulate(int[][],\ boolean)
comment1.text=\r\n\ Simula\ la\ soluci\u00F3n\ del\ problema\ d\u00EDa\ a\ d\u00EDa,\ mostrando\ los\ eventos\ y\ movimientos\ \u00F3ptimos\ en\ la\ consola.\r\n\ Ideal\ para\ visualizar\ el\ comportamiento\ del\ algoritmo\ paso\ a\ paso.\r\n\ @param\ days\ Una\ matriz\ que\ representa\ los\ eventos\ de\ cada\ d\u00EDa.\ Cada\ fila\ es\ un\ evento.\r\n\ @param\ slow\ Si\ es\ true,\ la\ simulaci\u00F3n\ se\ ejecuta\ lentamente\ con\ pausas\ para\ facilitar\ la\ observaci\u00F3n\ visual.\r\n
comment2.params=days
comment2.target=int[]\ solve(int[][])
comment2.text=\r\n\ Resuelve\ el\ problema\ de\ la\ marat\u00F3n\ de\ forma\ no\ visual.\r\n\ Calcula\ la\ ganancia\ m\u00E1xima\ para\ cada\ d\u00EDa\ y\ la\ devuelve\ como\ un\ arreglo.\r\n\ @param\ days\ La\ entrada\ del\ problema,\ donde\ cada\ fila\ es\ un\ evento\ diario.\r\n\ @return\ Un\ arreglo\ de\ enteros\ con\ la\ ganancia\ m\u00E1xima\ de\ cada\ d\u00EDa.\r\n
comment3.params=road
comment3.target=SilkRoadContest.Result\ findOptimalAssignment(SilkRoad)
comment3.text=\r\n\ Prepara\ e\ inicia\ el\ proceso\ de\ b\u00FAsqueda\ recursiva\ para\ encontrar\ la\ asignaci\u00F3n\ \u00F3ptima.\r\n\ @param\ road\ La\ instancia\ de\ SilkRoad\ que\ contiene\ el\ estado\ actual\ del\ tablero.\r\n\ @return\ Un\ objeto\ Result\ con\ la\ ganancia\ m\u00E1xima\ y\ los\ movimientos\ correspondientes.\r\n
comment4.params=robotIndex\ robots\ availableStores\ currentMoves\ currentProfit\ result\ boardSize
comment4.target=void\ solveAssignmentRecursive(int,\ java.util.List,\ java.util.List,\ java.util.List,\ int,\ SilkRoadContest.Result,\ int)
comment4.text=\r\n\ Algoritmo\ de\ backtracking\ recursivo\ para\ resolver\ el\ problema\ de\ asignaci\u00F3n.\r\n\ Explora\ todas\ las\ combinaciones\ posibles\ de\ asignaciones\ de\ robots\ a\ tiendas\ (donde\ cada\ tienda\ solo\r\n\ puede\ ser\ visitada\ una\ vez)\ y\ encuentra\ la\ combinaci\u00F3n\ que\ maximiza\ la\ ganancia\ total.\r\n\ @param\ robotIndex\ El\ \u00EDndice\ del\ robot\ actual\ que\ se\ est\u00E1\ considerando\ para\ una\ asignaci\u00F3n.\r\n\ @param\ robots\ La\ lista\ de\ todos\ los\ robots.\r\n\ @param\ availableStores\ La\ lista\ de\ tiendas\ que\ a\u00FAn\ no\ han\ sido\ asignadas.\r\n\ @param\ currentMoves\ La\ lista\ de\ movimientos\ en\ la\ ruta\ de\ recursi\u00F3n\ actual.\r\n\ @param\ currentProfit\ La\ ganancia\ acumulada\ en\ la\ ruta\ de\ recursi\u00F3n\ actual.\r\n\ @param\ result\ El\ objeto\ Result\ para\ almacenar\ la\ mejor\ soluci\u00F3n\ encontrada\ globalmente.\r\n\ @param\ boardSize\ El\ tama\u00F1o\ total\ del\ tablero.\r\n
comment5.params=args
comment5.target=void\ main(java.lang.String[])
comment5.text=\r\n\ M\u00E9todo\ principal\ para\ probar\ la\ clase\ directamente.\r\n\ Ejecuta\ los\ m\u00E9todos\ solve()\ y\ simulate()\ con\ datos\ de\ ejemplo\ y\ muestra\ los\ resultados.\r\n\ @param\ args\ Argumentos\ de\ la\ l\u00EDnea\ de\ comandos\ (no\ utilizados).\r\n
numComments=6
